From 6752d8d5e315eb3f061498a9c35558f90f9600e2 Mon Sep 17 00:00:00 2001
From: Christian Stewart <christian@paral.in>
Date: Sat, 18 Jul 2020 15:26:22 -0700
Subject: [PATCH] Remove dependency handling from Makefile

Buildroot will handle this for the makefile.

Signed-off-by: Christian Stewart <christian@paral.in>
---
 Makefile                    |  54 +++------
 mk/nvidia-modprobe.mk       |  55 ---------
 src/nvc.c                   |   6 +-
 src/nvidia-modprobe-utils.c | 225 ++++++++++++++++--------------------
 src/nvidia-modprobe-utils.h |  53 ++-------
 5 files changed, 128 insertions(+), 265 deletions(-)
 delete mode 100644 mk/nvidia-modprobe.mk

diff --git a/Makefile b/Makefile
index f1c56a9..80780d1 100644
--- a/Makefile
+++ b/Makefile
@@ -2,13 +2,13 @@
 # Copyright (c) 2017-2018, NVIDIA CORPORATION. All rights reserved.
 #
 
-.PHONY: all tools shared static deps install uninstall dist depsclean mostlyclean clean distclean
+.PHONY: all tools shared static install uninstall dist mostlyclean clean distclean
 .DEFAULT_GOAL := all
-STRIP  := @echo skipping: strip
+
 ##### Global variables #####
 
-WITH_LIBELF  ?= yes
-WITH_TIRPC   ?= yes
+WITH_LIBELF  ?= no
+WITH_TIRPC   ?= no
 WITH_SECCOMP ?= yes
 
 ##### Global definitions #####
@@ -16,15 +16,14 @@ WITH_SECCOMP ?= yes
 export prefix      = /usr
 export exec_prefix = $(prefix)
 export bindir      = $(exec_prefix)/bin
-export libdir      = $(exec_prefix)/lib64
+export libdir      = $(exec_prefix)/lib
 export docdir      = $(prefix)/share/doc
-export libdbgdir   = $(prefix)/lib64/debug$(libdir)
+export libdbgdir   = $(prefix)/lib/debug$(libdir)
 export includedir  = $(prefix)/include
 export pkgconfdir  = $(libdir)/pkgconfig
 
 export PKG_DIR     ?= $(CURDIR)/pkg
 export SRCS_DIR    ?= $(CURDIR)/src
-export DEPS_DIR    ?= $(CURDIR)/deps
 export DIST_DIR    ?= $(CURDIR)/dist
 export MAKE_DIR    ?= $(CURDIR)/mk
 export DEBUG_DIR   ?= $(CURDIR)/.debug
@@ -120,9 +119,9 @@ LDFLAGS  := -Wl,-zrelro -Wl,-znow -Wl,-zdefs -Wl,--gc-sections $(LDFLAGS)
 LDLIBS   := $(LDLIBS)
 
 # Library flags (recursively expanded to handle target-specific flags)
-LIB_CPPFLAGS       = -DNV_LINUX -isystem $(DEPS_DIR)$(includedir) -include $(BUILD_DEFS)
+LIB_CPPFLAGS       = -DNV_LINUX -include $(BUILD_DEFS)
 LIB_CFLAGS         = -fPIC
-LIB_LDFLAGS        = -L$(DEPS_DIR)$(libdir) -shared -Wl,-soname=$(LIB_SONAME)
+LIB_LDFLAGS        = -shared -Wl,-soname=$(LIB_SONAME)
 # LIB_LDLIBS_STATIC  = -l:libnvidia-modprobe-utils.a
 LIB_LDLIBS_SHARED  = -ldl -lcap -ltirpc
 ifeq ($(WITH_LIBELF), yes)
@@ -132,7 +131,7 @@ else
 LIB_LDLIBS_STATIC  += -l:libelf.a
 endif
 ifeq ($(WITH_TIRPC), yes)
-LIB_CPPFLAGS       += -isystem $(DEPS_DIR)$(includedir)/tirpc -DWITH_TIRPC
+LIB_CPPFLAGS       += -DWITH_TIRPC
 # LIB_LDLIBS_STATIC  += -l:libtirpc.a
 LIB_LDLIBS_SHARED  += -lpthread
 endif
@@ -176,15 +175,15 @@ $(LIB_RPC_SRCS): $(LIB_RPC_SPEC)
 	$(RM) $@
 	cd $(dir $@) && $(RPCGEN) $(RPCGENFLAGS) -C -M -N -o $(notdir $@) $(LIB_RPC_SPEC)
 
-$(LIB_OBJS): %.lo: %.c | deps
+$(LIB_OBJS): %.lo: %.c
 	$(CC) $(LIB_CFLAGS) $(LIB_CPPFLAGS) -MMD -MF $*.d -c $(OUTPUT_OPTION) $<
 
-$(BIN_OBJS): %.o: %.c | shared
+$(BIN_OBJS): %.o: %.c
 	$(CC) $(BIN_CFLAGS) $(BIN_CPPFLAGS) -MMD -MF $*.d -c $(OUTPUT_OPTION) $<
 
 -include $(DEPENDENCIES)
 
-$(LIB_SHARED): $(LIB_OBJS)
+$(LIB_SHARED): $(BUILD_DEFS) $(SRCS_DIR)/driver_rpc.h $(LIB_OBJS)
 	$(MKDIR) -p $(DEBUG_DIR)
 	$(CC) $(LIB_CFLAGS) $(LIB_CPPFLAGS) $(LIB_LDFLAGS) $(OUTPUT_OPTION) $^ $(LIB_SCRIPT) $(LIB_LDLIBS)
 	$(OBJCPY) --only-keep-debug $@ $(LIB_SONAME)
@@ -198,7 +197,7 @@ $(LIB_STATIC_OBJ): $(LIB_OBJS)
 	$(OBJCPY) --localize-hidden $@
 	$(STRIP) --strip-unneeded -R .comment $@
 
-$(BIN_NAME): $(BIN_OBJS)
+$(BIN_NAME): $(BUILD_DEFS) $(SRCS_DIR)/driver_rpc.h $(LIB_SHARED) $(BIN_OBJS)
 	$(CC) $(BIN_CFLAGS) $(BIN_CPPFLAGS) $(BIN_LDFLAGS) $(OUTPUT_OPTION) $^ $(BIN_SCRIPT) $(BIN_LDLIBS)
 	$(STRIP) --strip-unneeded -R .comment $@
 
@@ -219,17 +218,6 @@ shared: $(LIB_SHARED)
 
 static: $(LIB_STATIC)($(LIB_STATIC_OBJ))
 
-deps: export DESTDIR:=$(DEPS_DIR)
-deps: $(LIB_RPC_SRCS) $(BUILD_DEFS)
-	$(MKDIR) -p $(DEPS_DIR)
-	# $(MAKE) -f $(MAKE_DIR)/nvidia-modprobe.mk install
-ifeq ($(WITH_LIBELF), no)
-	# $(MAKE) -f $(MAKE_DIR)/elftoolchain.mk install
-endif
-ifeq ($(WITH_TIRPC), yes)
-	# $(MAKE) -f $(MAKE_DIR)/libtirpc.mk install
-endif
-
 install: all
 	$(INSTALL) -d -m 755 $(addprefix $(DESTDIR),$(includedir) $(bindir) $(libdir) $(docdir) $(libdbgdir) $(pkgconfdir))
 	# Install header files
@@ -237,8 +225,7 @@ install: all
 	# Install library files
 	$(INSTALL) -m 644 $(LIB_STATIC) $(DESTDIR)$(libdir)
 	$(INSTALL) -m 755 $(LIB_SHARED) $(DESTDIR)$(libdir)
-	$(LN) -sf $(LIB_SONAME) $(DESTDIR)$(libdir)/$(LIB_SYMLINK)
-	$(LDCONFIG) -n $(DESTDIR)$(libdir)
+	$(LN) -sf $(LIB_SHARED) $(DESTDIR)$(libdir)/$(LIB_SYMLINK)
 	# Install debugging symbols
 	# $(INSTALL) -m 644 $(DEBUG_DIR)/$(LIB_SONAME) $(DESTDIR)$(libdbgdir)
 	# Install configuration files
@@ -268,23 +255,12 @@ dist: install
 	$(TAR) --numeric-owner --owner=0 --group=0 -C $(dir $(DESTDIR)) -caf $(DESTDIR)_$(ARCH).tar.xz $(notdir $(DESTDIR))
 	$(RM) -r $(DESTDIR)
 
-depsclean:
-	$(RM) $(BUILD_DEFS)
-	-$(MAKE) -f $(MAKE_DIR)/nvidia-modprobe.mk clean
-ifeq ($(WITH_LIBELF), no)
-	-$(MAKE) -f $(MAKE_DIR)/elftoolchain.mk clean
-endif
-ifeq ($(WITH_TIRPC), yes)
-	-$(MAKE) -f $(MAKE_DIR)/libtirpc.mk clean
-endif
-
 mostlyclean:
 	$(RM) $(LIB_OBJS) $(LIB_STATIC_OBJ) $(BIN_OBJS) $(DEPENDENCIES)
 
-clean: mostlyclean depsclean
+clean: mostlyclean
 
 distclean: clean
-	$(RM) -r $(DEPS_DIR) $(DIST_DIR) $(DEBUG_DIR)
 	$(RM) $(LIB_RPC_SRCS) $(LIB_STATIC) $(LIB_SHARED) $(BIN_NAME)
 
 deb: DESTDIR:=$(DIST_DIR)/$(LIB_NAME)_$(VERSION)_$(ARCH)
diff --git a/mk/nvidia-modprobe.mk b/mk/nvidia-modprobe.mk
deleted file mode 100644
index ad399de..0000000
--- a/mk/nvidia-modprobe.mk
+++ /dev/null
@@ -1,55 +0,0 @@
-#
-# Copyright (c) 2017-2018, NVIDIA CORPORATION. All rights reserved.
-#
-
-include $(MAKE_DIR)/common.mk
-
-##### Source definitions #####
-
-VERSION        := 396.51
-PREFIX         := nvidia-modprobe-$(VERSION)
-URL            := https://github.com/NVIDIA/nvidia-modprobe/archive/$(VERSION).tar.gz
-
-SRCS_DIR       := $(DEPS_DIR)/src/$(PREFIX)
-MODPROBE_UTILS := $(SRCS_DIR)/modprobe-utils
-
-LIB_STATIC     := $(MODPROBE_UTILS)/libnvidia-modprobe-utils.a
-LIB_INCS       := $(MODPROBE_UTILS)/nvidia-modprobe-utils.h \
-                  $(MODPROBE_UTILS)/pci-enum.h
-LIB_SRCS       := $(MODPROBE_UTILS)/nvidia-modprobe-utils.c \
-                  $(MODPROBE_UTILS)/pci-sysfs.c
-
-##### Flags definitions #####
-
-ARFLAGS  := -rU
-CPPFLAGS := -D_FORTIFY_SOURCE=2 -DNV_LINUX
-CFLAGS   := -O2 -g -fdata-sections -ffunction-sections -fstack-protector -fno-strict-aliasing -fPIC
-
-##### Private rules #####
-
-LIB_OBJS := $(LIB_SRCS:.c=.o)
-
-$(SRCS_DIR)/.download_stamp:
-	$(MKDIR) -p $(SRCS_DIR)
-	$(CURL) --progress-bar -fSL $(URL) | \
-	$(TAR) -C $(SRCS_DIR) --strip-components=1 -xz $(PREFIX)/modprobe-utils
-	@touch $@
-
-$(LIB_SRCS): $(SRCS_DIR)/.download_stamp
-
-##### Public rules #####
-
-.PHONY: all install clean
-
-all: $(LIB_STATIC)
-
-$(LIB_STATIC): $(LIB_OBJS)
-	$(AR) rs $@ $^
-
-install: all
-	$(INSTALL) -d -m 755 $(addprefix $(DESTDIR),$(includedir) $(libdir))
-	$(INSTALL) -m 644 $(LIB_INCS) $(DESTDIR)$(includedir)
-	$(INSTALL) -m 644 $(LIB_STATIC) $(DESTDIR)$(libdir)
-
-clean:
-	$(RM) $(LIB_OBJS) $(LIB_STATIC)
diff --git a/src/nvc.c b/src/nvc.c
index f1d9b62..74ea61c 100644
--- a/src/nvc.c
+++ b/src/nvc.c
@@ -190,13 +190,13 @@ load_kernel_modules(struct error *err, const char *root)
                 }
 
                 log_info("loading kernel module nvidia");
-                if (nvidia_modprobe(0, -1) == 0)
+                if (nvidia_modprobe(0) == 0)
                         log_err("could not load kernel module nvidia");
                 else {
-                        if (nvidia_mknod(NV_CTL_DEVICE_MINOR, -1) == 0)
+                        if (nvidia_mknod(NV_CTL_DEVICE_MINOR) == 0)
                                 log_err("could not create kernel module device node");
                         for (int i = 0; i < (int)devs.num_matches; ++i) {
-                                if (nvidia_mknod(i, -1) == 0)
+                                if (nvidia_mknod(i) == 0)
                                         log_err("could not create kernel module device node");
                         }
                 }
diff --git a/src/nvidia-modprobe-utils.c b/src/nvidia-modprobe-utils.c
index d3f3233..fca21cf 100644
--- a/src/nvidia-modprobe-utils.c
+++ b/src/nvidia-modprobe-utils.c
@@ -1,3 +1,29 @@
+/*
+ * Copyright (c) 2013, NVIDIA CORPORATION.
+ *
+ * Permission is hereby granted, free of charge, to any person
+ * obtaining a copy of this software and associated documentation
+ * files (the "Software"), to deal in the Software without
+ * restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies
+ * of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ * This file provides utility functions on Linux for loading the
+ * NVIDIA kernel module and creating NVIDIA device files.
+ */
 
 #if defined(NV_LINUX)
 
@@ -27,9 +53,6 @@
 #define NV_NVIDIA_MODULE_NAME "nvidia"
 #define NV_PROC_REGISTRY_PATH "/proc/driver/nvidia/params"
 
-#define NV_NMODULE_NVIDIA_MODULE_NAME "nvidia%d"
-#define NV_NMODULE_PROC_REGISTRY_PATH "/proc/driver/nvidia/%d/params"
-
 #define NV_UVM_MODULE_NAME "nvidia-uvm"
 #define NV_UVM_DEVICE_NAME "/dev/nvidia-uvm"
 #define NV_UVM_TOOLS_DEVICE_NAME "/dev/nvidia-uvm-tools"
@@ -41,6 +64,9 @@
 #define NV_NVLINK_MODULE_NAME "nvidia-nvlink"
 #define NV_NVLINK_PROC_PERM_PATH "/proc/driver/nvidia-nvlink/permissions"
 
+#define NV_NVSWITCH_MODULE_NAME "nvidia-nvswitch"
+#define NV_NVSWITCH_PROC_PERM_PATH "/proc/driver/nvidia-nvswitch/permissions"
+
 #define NV_DEVICE_FILE_MODE_MASK (S_IRWXU|S_IRWXG|S_IRWXO)
 #define NV_DEVICE_FILE_MODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)
 #define NV_DEVICE_FILE_UID 0
@@ -54,84 +80,6 @@
 
 #define NV_MIN(a, b) (((a) < (b)) ? (a) : (b))
 
-/*
- * Construct the nvidia kernel module name based on the input
- * module instance provided.  If an error occurs, the null
- * terminator will be written to nv_module_name[0].
- */
-static __inline__ void assign_nvidia_kernel_module_name
-(
-    char nv_module_name[NV_MAX_MODULE_NAME_SIZE],
-    int module_instance
-)
-{
-    int ret;
-
-    if (is_multi_module(module_instance))
-    {
-        ret = snprintf(nv_module_name, NV_MAX_MODULE_NAME_SIZE,
-                       NV_NMODULE_NVIDIA_MODULE_NAME, module_instance);
-    }
-    else
-    {
-        ret = snprintf(nv_module_name, NV_MAX_MODULE_NAME_SIZE,
-                       NV_NVIDIA_MODULE_NAME);
-    }
-
-    if (ret <= 0)
-    {
-        goto fail;
-    }
-
-    nv_module_name[NV_MAX_MODULE_NAME_SIZE - 1] = '\0';
-
-    return;
-
-fail:
-
-    nv_module_name[0] = '\0';
-}
-
-
-/*
- * Construct the proc registry path name based on the input
- * module instance provided.  If an error occurs, the null
- * terminator will be written to proc_path[0].
- */
-static __inline__ void assign_proc_registry_path
-(
-    char proc_path[NV_MAX_PROC_REGISTRY_PATH_SIZE],
-    int module_instance
-)
-{
-    int ret;
-
-    if (is_multi_module(module_instance))
-    {
-        ret = snprintf(proc_path, NV_MAX_PROC_REGISTRY_PATH_SIZE,
-                       NV_NMODULE_PROC_REGISTRY_PATH, module_instance);
-    }
-    else
-    {
-        ret = snprintf(proc_path, NV_MAX_PROC_REGISTRY_PATH_SIZE,
-                       NV_PROC_REGISTRY_PATH);
-    }
-
-    if (ret <= 0)
-    {
-        goto fail;
-    }
-
-    proc_path[NV_MAX_PROC_REGISTRY_PATH_SIZE - 1] = '\0';
-
-    return;
-
-fail:
-
-    proc_path[0] = '\0';
-}
-
-
 /*
  * Just like strcmp(3), except that differences between '-' and '_' are
  * ignored. This is useful for comparing module names, where '-' and '_'
@@ -370,18 +318,20 @@ static int modprobe_helper(const int print_errors, const char *module_name)
             return 0;
 
         default:
-            if (waitpid(pid, &status, 0) < 0)
-            {
-                return 0;
-            }
-            if (WIFEXITED(status) && WEXITSTATUS(status) == 0)
-            {
-                return 1;
-            }
-            else
-            {
-                return 0;
-            }
+            /*
+             * waitpid(2) is not always guaranteed to return success even if
+             * the child terminated normally.  For example, if the process
+             * explicitly configured the handling of the SIGCHLD signal
+             * to SIG_IGN, then waitpid(2) will instead block until all
+             * children terminate and return the error ECHILD, regardless
+             * of the child's exit codes.
+             *
+             * Hence, ignore waitpid(2) error codes and instead check
+             * whether the desired kernel module is loaded.
+             */
+            waitpid(pid, NULL, 0);
+
+            return is_kernel_module_loaded(module_name);
     }
 
     return 1;
@@ -391,13 +341,9 @@ static int modprobe_helper(const int print_errors, const char *module_name)
 /*
  * Attempt to load an NVIDIA kernel module
  */
-int nvidia_modprobe(const int print_errors, int module_instance)
+int nvidia_modprobe(const int print_errors)
 {
-    char nv_module_name[NV_MAX_MODULE_NAME_SIZE];
-
-    assign_nvidia_kernel_module_name(nv_module_name, module_instance);
-
-    return modprobe_helper(print_errors, nv_module_name);
+    return modprobe_helper(print_errors, NV_NVIDIA_MODULE_NAME);
 }
 
 
@@ -494,24 +440,22 @@ static int get_file_state_helper(
     return state;
 }
 
-int nvidia_get_file_state(int minor, int module_instance)
+int nvidia_get_file_state(int minor)
 {
     char path[NV_MAX_CHARACTER_DEVICE_FILE_STRLEN];
-    char proc_path[NV_MAX_PROC_REGISTRY_PATH_SIZE];
     mode_t mode;
     uid_t uid;
     gid_t gid;
     int modification_allowed;
     int state = 0;
 
-    assign_device_file_name(path, minor, module_instance);
-    assign_proc_registry_path(proc_path, module_instance);
+    assign_device_file_name(path, minor);
 
     init_device_file_parameters(&uid, &gid, &mode, &modification_allowed,
-                                proc_path);
+                                NV_PROC_REGISTRY_PATH);
 
     state = get_file_state_helper(path, NV_MAJOR_DEVICE_NUMBER, minor,
-                                  proc_path, uid, gid, mode);
+                                  NV_PROC_REGISTRY_PATH, uid, gid, mode);
 
     return state;
 }
@@ -522,8 +466,8 @@ int nvidia_get_file_state(int minor, int module_instance)
  * permissions.  Returns 1 if the file is successfully created; returns 0
  * if the file could not be created.
  */
-int mknod_helper(int major, int minor, const char *path,
-                 const char *proc_path)
+static int mknod_helper(int major, int minor, const char *path,
+                        const char *proc_path)
 {
     dev_t dev = NV_MAKE_DEVICE(major, minor);
     mode_t mode;
@@ -616,15 +560,13 @@ int mknod_helper(int major, int minor, const char *path,
  * Attempt to create a device file with the specified minor number for
  * the specified NVIDIA module instance.
  */
-int nvidia_mknod(int minor, int module_instance)
+int nvidia_mknod(int minor)
 {
     char path[NV_MAX_CHARACTER_DEVICE_FILE_STRLEN];
-    char proc_path[NV_MAX_PROC_REGISTRY_PATH_SIZE];
 
-    assign_device_file_name(path, minor, module_instance);
-    assign_proc_registry_path(proc_path, module_instance);
+    assign_device_file_name(path, minor);
 
-    return mknod_helper(NV_MAJOR_DEVICE_NUMBER, minor, path, proc_path);
+    return mknod_helper(NV_MAJOR_DEVICE_NUMBER, minor, path, NV_PROC_REGISTRY_PATH);
 }
 
 
@@ -633,7 +575,7 @@ int nvidia_mknod(int minor, int module_instance)
  * device with the specified name.  Returns the major number on success,
  * or -1 on failure.
  */
-int get_chardev_major(const char *name)
+static int get_chardev_major(const char *name)
 {
     int ret = -1;
     char line[NV_MAX_LINE_LENGTH];
@@ -743,13 +685,9 @@ int nvidia_modeset_modprobe(void)
  */
 int nvidia_modeset_mknod(void)
 {
-    char proc_path[NV_MAX_PROC_REGISTRY_PATH_SIZE];
-
-    assign_proc_registry_path(proc_path, NV_MODULE_INSTANCE_NONE);
-
     return mknod_helper(NV_MAJOR_DEVICE_NUMBER,
                         NV_MODESET_MINOR_DEVICE_NUM,
-                        NV_MODESET_DEVICE_NAME, proc_path);
+                        NV_MODESET_DEVICE_NAME, NV_PROC_REGISTRY_PATH);
 }
 
 /*
@@ -770,25 +708,62 @@ int nvidia_nvlink_mknod(void)
                         NV_NVLINK_PROC_PERM_PATH);
 }
 
+/*
+ * Attempt to create the NVIDIA NVSwitch driver device files.
+ */
+int nvidia_nvswitch_mknod(int minor)
+{
+    int major = 0;
+    char name[NV_MAX_CHARACTER_DEVICE_FILE_STRLEN];
+    int ret;
+
+    major = get_chardev_major(NV_NVSWITCH_MODULE_NAME);
+
+    if (major < 0)
+    {
+        return 0;
+    }
+
+    if (minor == NV_NVSWITCH_CTL_MINOR)
+    {
+        ret = snprintf(name, NV_MAX_CHARACTER_DEVICE_FILE_STRLEN,
+                       NV_NVSWITCH_CTL_NAME);
+    }
+    else
+    {
+        ret = snprintf(name, NV_MAX_CHARACTER_DEVICE_FILE_STRLEN,
+                       NV_NVSWITCH_DEVICE_NAME, minor);
+    }
+
+    if (ret <= 0)
+    {
+        return 0;
+    }
+
+    return mknod_helper(major, minor, name, NV_NVSWITCH_PROC_PERM_PATH);
+}
+
 int nvidia_vgpu_vfio_mknod(int minor_num)
 {
     int major = get_chardev_major(NV_VGPU_VFIO_MODULE_NAME);
     char vgpu_dev_name[NV_MAX_CHARACTER_DEVICE_FILE_STRLEN];
-    char proc_path[NV_MAX_PROC_REGISTRY_PATH_SIZE];
+    int ret;
 
     if (major < 0)
     {
         return 0;
     }
 
-    assign_proc_registry_path(proc_path, NV_MODULE_INSTANCE_NONE);
-
-    snprintf(vgpu_dev_name, NV_MAX_CHARACTER_DEVICE_FILE_STRLEN,
-             NV_VGPU_VFIO_DEVICE_NAME, minor_num);
+    ret = snprintf(vgpu_dev_name, NV_MAX_CHARACTER_DEVICE_FILE_STRLEN,
+                   NV_VGPU_VFIO_DEVICE_NAME, minor_num);
+    if (ret <= 0)
+    {
+        return 0;
+    }
 
     vgpu_dev_name[NV_MAX_CHARACTER_DEVICE_FILE_STRLEN - 1] = '\0';
 
-    return mknod_helper(major, minor_num, vgpu_dev_name, proc_path);
+    return mknod_helper(major, minor_num, vgpu_dev_name, NV_PROC_REGISTRY_PATH);
 }
 
-#endif /* NV_LINUX */
\ No newline at end of file
+#endif /* NV_LINUX */
diff --git a/src/nvidia-modprobe-utils.h b/src/nvidia-modprobe-utils.h
index e06b4a4..5ab3355 100644
--- a/src/nvidia-modprobe-utils.h
+++ b/src/nvidia-modprobe-utils.h
@@ -31,29 +31,17 @@
 #include <stdio.h>
 
 #define NV_MAX_CHARACTER_DEVICE_FILE_STRLEN  128
-#define NV_MODULE_INSTANCE_NONE              -1
-#define NV_MODULE_INSTANCE_ZERO              0
-#define NV_MAX_MODULE_INSTANCES              8
 #define NV_CTL_DEVICE_NUM                    255
 #define NV_MODESET_MINOR_DEVICE_NUM          254
-
-#define NV_FRONTEND_CONTROL_DEVICE_MINOR_MAX NV_CTL_DEVICE_NUM
+#define NV_NVSWITCH_CTL_MINOR                255
 
 #define NV_DEVICE_FILE_PATH "/dev/nvidia%d"
 #define NV_CTRL_DEVICE_FILE_PATH "/dev/nvidiactl"
 #define NV_MODESET_DEVICE_NAME "/dev/nvidia-modeset"
 #define NV_VGPU_VFIO_DEVICE_NAME "/dev/nvidia-vgpu%d"
 #define NV_NVLINK_DEVICE_NAME "/dev/nvidia-nvlink"
-
-#define NV_NMODULE_CTRL_DEVICE_FILE_PATH "/dev/nvidiactl%d"
-
-#define NV_FRONTEND_CONTROL_DEVICE_MINOR_MIN \
-    (NV_FRONTEND_CONTROL_DEVICE_MINOR_MAX - \
-     NV_MAX_MODULE_INSTANCES)
-
-#define NV_FRONTEND_IS_CONTROL_DEVICE(x) \
-    ((x <= NV_FRONTEND_CONTROL_DEVICE_MINOR_MAX) && \
-     (x > NV_FRONTEND_CONTROL_DEVICE_MINOR_MIN))
+#define NV_NVSWITCH_CTL_NAME "/dev/nvidia-nvswitchctl"
+#define NV_NVSWITCH_DEVICE_NAME "/dev/nvidia-nvswitch%d"
 
 #if defined(NV_LINUX)
 
@@ -76,31 +64,19 @@ static __inline__ int nvidia_test_file_state(int state,
     return !!(state & (1 << value));
 }
 
-int nvidia_get_file_state(int minor, int module_instance);
-int nvidia_modprobe(const int print_errors, int module_instance);
-int nvidia_mknod(int minor, int module_instance);
+int nvidia_get_file_state(int minor);
+int nvidia_modprobe(const int print_errors);
+int nvidia_mknod(int minor);
 int nvidia_uvm_modprobe(void);
 int nvidia_uvm_mknod(int base_minor);
 int nvidia_modeset_modprobe(void);
 int nvidia_modeset_mknod(void);
 int nvidia_vgpu_vfio_mknod(int minor_num);
 int nvidia_nvlink_mknod(void);
-
-int mknod_helper(int major, int minor, const char *path, const char *proc_path);
-int get_chardev_major(const char *name);
+int nvidia_nvswitch_mknod(int minor);
 
 #endif /* NV_LINUX */
 
-/*
- * Detect use of multiple kernel module instances. Use a single 
- * module instance unless instance != NV_MODULE_INSTANCE_NONE
- */
-static __inline__ int is_multi_module(int module_instance)
-{
-    return (module_instance != NV_MODULE_INSTANCE_NONE);
-}
-
-
 /*
  * Construct the device file name, based on 'minor'.  If an error
  * occurs, the nul terminator will be written to name[0].
@@ -108,8 +84,7 @@ static __inline__ int is_multi_module(int module_instance)
 static __inline__ void assign_device_file_name
 (
     char name[NV_MAX_CHARACTER_DEVICE_FILE_STRLEN],
-    int minor,
-    int module_instance
+    int minor
 )
 {
     int ret;
@@ -119,20 +94,12 @@ static __inline__ void assign_device_file_name
         goto fail;
     }
 
-    if (!is_multi_module(module_instance) && minor == NV_CTL_DEVICE_NUM)
+    if (minor == NV_CTL_DEVICE_NUM)
     {
         ret = snprintf(name,
                        NV_MAX_CHARACTER_DEVICE_FILE_STRLEN,
                        NV_CTRL_DEVICE_FILE_PATH);
     }
-    else if (is_multi_module(module_instance) && 
-             NV_FRONTEND_IS_CONTROL_DEVICE(minor))
-    {
-        ret = snprintf(name,
-                       NV_MAX_CHARACTER_DEVICE_FILE_STRLEN,
-                       NV_NMODULE_CTRL_DEVICE_FILE_PATH,
-                       module_instance);
-    }
     else
     {
         ret = snprintf(name,
@@ -154,4 +121,4 @@ fail:
     name[0] = '\0';
 }
 
-#endif /* __NVIDIA_MODPROBE_UTILS_H__ */
\ No newline at end of file
+#endif /* __NVIDIA_MODPROBE_UTILS_H__ */
-- 
2.27.0

